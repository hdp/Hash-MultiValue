NAME
    Hash::MultiValue - Store multiple values per key

SYNOPSIS
      use Hash::MultiValue;

      my $hash = Hash::MultiValue->new(
          foo => 'a',
          foo => 'b',
          bar => 'baz',
      );

      # $hash is an object, but can be used as a hashref and DWIMs!

      my $foo = $hash->{foo};         # 'b' (the last entry)
      my $foo = $hash->get('foo');    # 'b' (always, regardless of context)
      my @foo = $hash->getall('foo'); # ('a', 'b')

      keys %$hash; # ('foo', 'bar') not guaranteed to be ordered
      $hash->keys; # ('foo', 'bar') guaranteed to be ordered

      # get a plain hash. values are all single element
      %hash   = $hash->as_hash;
      $hash_r = $hash->as_hashref;

      # get a pair so you can pass it to new()
      @pairs = $hash->flatten; # ('foo' => 'a', 'foo' => 'b', 'bar' => 'baz')

DESCRIPTION
    Hash::MultiValue is an object that behaves like a hash reference that
    may contain multiple values per key, inspired by MultiDict of WebOb.

    It uses "tie" to make the object behaves also like a hash reference.

WHY THIS MODULE
    In a typical web application, the request parameters (a.k.a CGI
    parameters) can be single value or multi values. Using CGI.pm style
    "param" is one way to deal with this problem (and it is good), but
    there's another approach to convert parameters into a hash reference,
    like Catalyst's "$c->req->parameters" does, and it sucks.

    Why? Because the value could be just a scalar if there is one value and
    an array ref if there are multiple, depending on *user input* rather
    than *how you code it*. So your code should always be like this to be
    defensive:

      my $p = $c->req->parameters;
      my @maybe_multi = ref $p->{m} eq 'ARRAY' ? @{$p->{m}} : ($p->{m});
      my $must_single = ref $p->{m} eq 'ARRAY' ? $p->{m}->[0] : $p->{m};

    Otherwise you'll get a random runtime exception of *Can't use string as
    an ARRAY ref* or get stringified array *ARRAY(0xXXXXXXXXX)* as a string,
    *depending on user input* and which is miserable and insecure.

    This module provides a solution to this by returning a tied hash which
    always behaves like an element with a single hash, but as well as an
    explicit API call like "get" and "getall" to return single or multiple
    values.

    Yes, there is Tie::Hash::MultiValue and this module tries to solve
    exactly the same problem, but in a slightly different API.

AUTHOR
    Tatsuhiko Miyagawa <miyagawa@bulknews.net>

LICENSE
    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

SEE ALSO
    <http://pythonpaste.org/webob/#multidict> Tie::Hash::MultiValue

